import { GetStaticProps } from "next";

// para de fato passarmos a usar typescript, fazemos a tipagem das props
type HomeProps = {
  episodes: Array<{
    //indicamos n√£o apenas que episodes √© do tipo Array, o que seria vago, mas que dentro desse Array esperamos encontrar objetos.
    id: string; //por sua vez, esses objetos esperamos num certo formato, com propriedades de determinados tipos.
    title: string;
    members: string[];
    // ...
  }>;
};

export default function Home(props) {
  console.log(props.episodes);
  return (
    <>
      <h1>üõ∏</h1>
      {/* <p>{JSON.stringify(props.episodes)}</p> */}
    </>
  );
}

//API usando modelo SSG (Static Site Generation)
// Assim que o primeiro usu√°rio final acessa essa p√°gina, criamos uma vers√£o est√°tica dela, ou seja um html, e servimos ela para todos que a acessarem a partir de ent√£o - n√£o importa quantas pessoas acessarem, elas receber√£o o mesmo conte√∫do. Essa estrat√©gia √© boa quando n√£o precisamos atualizar o conte√∫do a cada instante, logo n√£o queremos sobrecarregar nosso servidor com requisi√ß√µes √† p√°gina e gastar recursos desnecessariamente, que √© um problema da estrat√©gia SSR que testamos antes. Com SSG nossa p√°gina ser√° atualizada apenas quando quisermos que o servidor a renderize novamente, pode ser a cada tantos minutos ou at√© mesmo dias, um intervalo de tempo escolhido por n√≥s para atender nossas necessidades, e nossa p√°gina fica muito mais perform√°tica.
export const getStaticProps: GetStaticProps = async () => {
  //transformamos em arrow function, e mais importante do que isso tipamos a fun√ß√£o, fazendo ela deixar de ser simples JS e passar a ser typescript. Uma das vantagens √© por exemplo podemos apagar o return abaixo e com o comando Ctrl + barraDeEspa√ßo n√≥s iremos receber sugest√µes do que √© v√°lido como retorno dessa fun√ß√£o.
  //trocamos de getServerSideProps
  const response = await fetch("http://localhost:3333/episodes");
  const data = await response.json();

  return {
    props: {
      episodes: data,
    },
    revalidate: 60 * 60 * 8, //adicionamos revalidate, que recebe um n√∫mero em segundos com a frequ√™ncia com que queremos gerar uma nova vers√£o dessa p√°gina
  };
};
// O recurso de Static Site Generation s√≥ funciona em produ√ß√£o, ent√£o precisamos criar uma build do projeto para simular a aplica√ß√£o rodando em produ√ß√£o: para isso no terminal rodamos os comando yarn build e yarn start, e j√° no log do yarn build n√≥s podemos verificar se nossa p√°gina est√° sendo gerada usando a estrat√©gia SSG ou n√£o
// N√≥s podemos atestar o funcionamento da nossa estrat√©gia em Developer Tools na aba Network, ou ainda no pr√≥prio terminal onde estivermos rodando nosso servidor mockado (pelo comando yarn server) pois se ao recarregarmos a p√°gina n√£o obtivemos novo input do json-server significa que ele n√£o precisou servir novamente, ou seja a p√°gina n√£o precisou fazer uma nova requisi√ß√£o, pois ela j√° havia sido gerada com os dados inclusos -- resumindo, ap√≥s a primeira vez que a p√°gina √© gerada, nenhuma outra requisi√ß√£o foi feita, porque nenhuma outra chamada √† API foi feita. Esse √© um dos diferenciais do Next.js e um dos maiores avan√ßos na √°rea de front-end dos √∫ltimos anos.
